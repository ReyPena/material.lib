//Using border-box box-sizing allows our rows and columns to have their widths preserved in spite of changes to border and padding.

.row,
.column {
	box-sizing: border-box;
}

//Clearfix solution from http://www.sitepoint.com/clearing-floats-overview-different-clearfix-methods/
//Causes row to stretch to accomodate the columns it contains without adding to the markup.

.row:before,
.row:after {
	content: "";
	display: table;
}

.row:after {
	clear: both;
}

//Children can be positioned absolutely relative to our columns, and the columns become display: block by being floated left.

.column {
	position: relative;
	float: left;
}

//Columns adjacent siblings will have a left margin of 1%

.column + .column {
	margin-left: 1%;
}

//Width of one column (out of 12) is (100 - 11) / 12 = 7.4166666667, because with single columns, you would have 11 1% gaps.

.column-1,
.column-twelve {
 width: 7.4166666667%;
}

//The width of the remaining columns will be calculated as (7.4166666667 * #) + (# - 1), where number is how many columns thick the column is. OR we can use (100 - # of margins) / (# of columns), where # of columns is how many CAN fit in a row. So (100 - 0) / 1 = 100, takes up the full width. 100 - 1 / 2 = 49.5, which is two columns with a 1% margin. 

.column-2,
.column-six {
	width: %;
}

.column-3,
.column-four {
	width: ;
}

.column-4,
.column-three {
	width: %;
}

.column-5 {
	width: %;
}

.column-6,
.column-2 {
	width: %;
}

.column-7 {
	width: %;
}

.column-8 {
	width: %;
}

.column-9 {
	width: %;
}

.column-10 {
	width: %;
}

.column-11 {
	width: %;
}

.column-12,
.column-one {
	width: 100%;
}

